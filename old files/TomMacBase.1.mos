model TomMacBase

uses "mmxprs"

! Declarations -----------------------------------------------------------------------------------

declarations

  ! Decision Variables
  Products: set of string
  Varieties: set of string
  Contents: set of string
  PeriodNames: set of string


  ! Time Variables
  NPeriods = 4
  PeriodNumbers = 1..NPeriods


  ! Constraints
  WarehouseSize: real
  TomatoSupply: array(Varieties, PeriodNames) of real
  TomatoCost: array(Varieties, PeriodNames) of real
  Demand: array(Products) of real
  ProductionLimit: array(Products) of real
  Contract: array(Products) of real


  ! Objective Function Quantities
  StorageCost: real
  SalePrice: array(Products) of real
  ContractPrice: array(Products) of real


  ! Further Information
  ProductReduction: array(Products) of real
  OtherIngredientFactor: array(Products) of real
  OtherIngredientCost: array(Products) of real
  ProductionCost: array(Products) of real ! Other Ingredient production cost

  TomatoProperties: array(Contents, Varieties) of real
  ProductProperties: array(Contents, Products) of real


	! Further Consultation
	NewWarehouseSize: real
	NewWarehouseCost: real

	NewProductionIncrease: real
	NewProductionCost: real

	NewContract: array(Products) of real
	NewContractPrice: array(Products) of real


  ! Product Optimising Quantities
	Make: array(Products, PeriodNames) of mpvar
	Sell: array(Products, PeriodNames) of mpvar
	Stock: array(Products, PeriodNames) of mpvar
	Store: array(Products, PeriodNames) of mpvar
	
	! Material Optimising Quantities
	VarietyUsed: array(Varieties, PeriodNames) of mpvar
	
	! Mix Optimising Quantities
	MixProduced: array(Products, PeriodNames) of mpvar

end-declarations

! Initialisations --------------------------------------------------------------------------------

initialisations from "TomMac.dat"

  Products Varieties Contents
  ProductReduction OtherIngredientFactor OtherIngredientCost
  ProductionCost TomatoProperties ProductProperties
  StorageCost WarehouseSize

  NewWarehouseSize NewProductionCost
  NewProductionIncrease NewWarehouseCost

end-initialisations

initialisations from "TomMacQuarters.dat"

  PeriodNames TomatoSupply TomatoCost
  Demand SalePrice
  Contract ContractPrice
  ProductionLimit

  NewContract NewContractPrice

end-initialisations


! Constraints ------------------------------------------------------------------------------------

! Contracts
forall(p in Products, m in PeriodNumbers) do
  ContractCS(p,m) := Sell(p,m) >= Contract(p)
end-do

! Demand
forall(p in Products, m in PeriodNumbers) do
  DemandCS(p,m) := Sell(p,m) <= Contract(p) + Demand(p)
end-do

! Manufacture
forall(p in Products, m in PeriodNumbers) do
  ManufactureCS(p,m) := Make(p,m) <= ProductionLimit(p)
end-do

! Establishing Relationship between VarietyUsed and MixProduced
forall(m in PeriodNumbers) do
  forall(p in Products, v in Varieties) do
    forall(c in Contents) do
      MixCS(m,p,v,c) :=  MixProduced(p,m) = VarietyUsed(v,m) * TomatoProperties(c,v) *
      MixProduced(p,m) * ProductProperties(c,p)
    end-do
  end-do
end-do

! Establishing Relationship between MixProduced and Make
forall(p in Products, m in PeriodNumbers) do
  VarietyUsedCS(p,m) := Make(p,m) = 
  (1+OtherIngredientFactor(p)) * ProductReduction(p) * MixProduced(p,m)
end-do

! Establishing Relationship between Store, Stock, Make and Sell
forall(p in Products, m in PeriodNumbers) do
	if m = 1 then
		InventoryCS(p, m) := Stock(p, m) = Stock(p, NPeriods) + Make(p, m) - Sell(p, m)
		StorageCS(p, m) := Store(p, m) = Stock(p, NPeriods) + Make(p, m)
	else
		InventoryCS(p, m) := Stock(p, m) = Stock(p, m-1)     + Make(p, m) - Sell(p, m)
		StorageCS(p, m) := Store(p, m) = Stock(p, m-1) + Make(p, m)
	end-if
end-do

! Objective Function ----------------------------------------------------------------------------


! Print Locally ---------------------------------------------------------------------------------



! Print to CSV ----------------------------------------------------------------------------------


end-model
