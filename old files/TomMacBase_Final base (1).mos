model TomMacBase

uses "mmxprs"

! Declarations -----------------------------------------------------------------------------------

declarations

  ! Decision Variables
  Products: set of string
  Varieties: set of string
  Contents: set of string
  PeriodNames: set of string


  ! Time Variables
  NPeriods = 4
  PeriodNumbers = 1..NPeriods


  ! Constraints
  WarehouseSize: real
  TomatoSupply: array(Varieties, PeriodNumbers) of real
  TomatoCost: array(Varieties, PeriodNumbers) of real
  Demand: array(Products) of real
  ProductionLimit: array(Products) of real
  Contract: array(Products) of real


  ! Objective Function Quantities
  StorageCost: real
  SalePrice: array(Products) of real
  ContractPrice: array(Products) of real


  ! Further Information
  ProductReduction: array(Products) of real
  OtherIngredientFactor: array(Products) of real
  OtherIngredientCost: array(Products) of real
  ProductionCost: array(Products) of real ! Other Ingredient production cost


  ! Mix Properties
  TomatoProperties: array(Contents, Varieties) of real
  ProductProperties: array(Contents, Products) of real


	! Further Consultation
	NewWarehouseSize: real
	NewWarehouseCost: real

	NewProductionIncrease: real
	NewProductionCost: real

	NewContract: array(Products) of real
	NewContractPrice: array(Products) of real

	! Decision Variables
	VarietyUsed: array(Varieties, Products, PeriodNumbers) of mpvar
	Sold: array(Products, PeriodNumbers) of mpvar
	Stock: array(Products, PeriodNumbers) of mpvar


	! Derviative Decision Variables
	Make: array(Products, PeriodNumbers) of mpvar
	MixProduced: array(Products, PeriodNumbers) of mpvar


end-declarations

! Initialisations --------------------------------------------------------------------------------

initialisations from "TomMac.dat"

  Products Varieties Contents
  ProductReduction OtherIngredientFactor OtherIngredientCost
  ProductionCost TomatoProperties ProductProperties
  StorageCost WarehouseSize

  NewWarehouseSize NewProductionCost
  NewProductionIncrease NewWarehouseCost

end-initialisations

initialisations from "TomMacQuarters.dat"

  PeriodNames TomatoSupply TomatoCost
  Demand SalePrice
  Contract ContractPrice
  ProductionLimit

  NewContract NewContractPrice

end-initialisations


! Constraints ------------------------------------------------------------------------------------

! Contracts
forall(p in Products, m in PeriodNumbers) do
  ContractCS(p,m) := Sold(p,m) >= Contract(p)
end-do

! Demand
forall(p in Products, m in PeriodNumbers) do
  DemandCS(p,m) := Sold(p,m) <= (Contract(p) + Demand(p))
end-do


! Availability
forall(v in Varieties, m in PeriodNumbers) do
  AvailabilityCS(v,m) := sum(p in Products) VarietyUsed(v,p,m) <= TomatoSupply(v,m)
end-do

! Storage
forall(m in PeriodNumbers) do
  TotalStock(m) := sum(p in Products) Stock(p,m)
  TotalStock(m) <= WarehouseSize
end-do

! Establishing relationship between mixtures
forall(p in Products, c in Contents, m in PeriodNumbers) do
  State(p,c,m) := sum(v in Varieties) VarietyUsed(v,p,m) * TomatoProperties(c,v)
  MixtureCS(p,c,m) := State(p,c,m) = ProductProperties(c,p) * MixProduced(p,m)
end-do


! Establishing Relationship between MixProduced and Make
forall(p in Products, m in PeriodNumbers) do
  MixProducedCS(p,m) := Make(p,m) =
  (1 + OtherIngredientFactor(p)) *
  ProductReduction(p) * MixProduced(p,m)
end-do

! Manufacture
forall(p in Products, m in PeriodNumbers) do
  ManufactureCS(p,m) := Make(p,m) <= ProductionLimit(p)
end-do



! Establishing Relationship between Stock, Make and Sell
forall(p in Products, m in PeriodNumbers) do
	if m = 1 then
		InventoryCS(p, m) := Stock(p, m) = Stock(p, NPeriods) + Make(p, m) - Sold(p, m)
	else
		InventoryCS(p, m) := Stock(p, m) = Stock(p, m-1)     + Make(p, m) - Sold(p, m)
	end-if
end-do


! Objective Function ----------------------------------------------------------------------------

! Profits
ContractProfit := NPeriods * sum(p in Products)
Contract(p) * ContractPrice(p)

DemandProfit := sum(p in Products, m in PeriodNumbers)
(Sold(p,m) - Contract(p))  * SalePrice(p)

TotalProfit := ContractProfit + DemandProfit


! Costs
TotalMaterialCost := sum(p in Products, v in Varieties, m in PeriodNumbers)
TomatoCost(v,m) * VarietyUsed(v,p,m)

OtherIngredCost := sum(p in Products, m in PeriodNumbers)
ProductReduction(p) * OtherIngredientFactor(p) * MixProduced(p,m) * OtherIngredientCost(p)

ProdCost := sum(p in Products, m in PeriodNumbers)
Make(p,m) * ProductionCost(p)

WarehouseStorageCost := sum(p in Products, m in PeriodNumbers)
Stock(p,m) * StorageCost

TotalCost := TotalMaterialCost + OtherIngredCost + ProdCost + WarehouseStorageCost


! Objective Function
TotalIncome := TotalProfit - TotalCost

maximise(TotalIncome)


! Print Locally ---------------------------------------------------------------------------------
forall(p in Products) do
  writeln
  writeln(p, ":")
  forall(m in PeriodNumbers) do
    write("In ", PeriodNames(m), ": ")
    write("make ", strfmt(getsol(Make(p, m)),3), "; ")
    write("sell ", strfmt(getsol(Sold(p, m)),3), "; ")
    write("stock ", strfmt(getsol(Stock(p, m)),3))
    writeln
  end-do
end-do


writeln
forall(p in Products) do
  forall(v in Varieties) do
    writeln
    writeln("Variety: ", v)
    forall(m in PeriodNumbers) do
      write("In ", PeriodNames(m), ": ")
      write("used ", strfmt(getsol(VarietyUsed(v,p, m)),3))
      writeln
    end-do
  end-do
end-do

writeln
forall(p in Products) do
  writeln
  writeln("Product: ", p)
  forall(m in PeriodNumbers) do
    write("In ", PeriodNames(m), ": ")
    write("mix produced ", strfmt(getsol(MixProduced(p, m)),3))
    writeln
  end-do
end-do



writeln
writeln("Total Profit = £", strfmt(getsol(TotalIncome),6))
writeln("Total Income = £", strfmt(getsol(TotalProfit),6))
writeln("Total Cost = £", strfmt(getsol(TotalCost),6))



! Print to CSV ----------------------------------------------------------------------------------






end-model
